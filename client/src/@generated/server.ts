/* eslint-disable */
/* tslint:disable */
/* Generated by Specta for Juno. DO NOT EDIT */
import { initTRPC } from '@trpc/server';

export type File = { id: number; backend_name: string; key: string; pending_auto_match: number; unavailable_since: number | null; edition_name: string | null }

export type GetAllMediaFilter = { parent_id: number | null; search: string | null; media_types: MediaType[] | null }

export type GetAllMediaInput = { filter: GetAllMediaFilter }

export type GetMediaByIdInput = { media_id: number }

export type GetSeasonEpisodesInput = { show_id: number; season_numbers: number[] }

export type GetSeasonsInput = { show_id: number }

export type Media = { id: number; name: string; description: string | null; poster_url: string | null; background_url: string | null; thumbnail_url: string | null; parent_id: number | null; media_type: MediaType; tmdb_parent_id: number; tmdb_item_id: number | null; rating: number | null; release_date: number | null; runtime_minutes: number | null; season_number: number | null; episode_number: number | null }

export type MediaDetails = { media: Media; default_connection: File | null; connections: File[] }

export type MediaType = "Movie" | "Show" | "Season" | "Episode"

export type MediaWithFirstConnection = { media: Media; default_connection: File | null }

const t = initTRPC.create();
const publicProcedure = t.procedure;
const appRouter = t.router({
    get_all_media: publicProcedure.input((value): GetAllMediaInput => { throw new Error('Router should not be used') }).output((value): MediaWithFirstConnection[] => { throw new Error('Router should not be used') }).query((opts): MediaWithFirstConnection[] => { throw new Error('Router should not be used') }),
get_media_by_id: publicProcedure.input((value): GetMediaByIdInput => { throw new Error('Router should not be used') }).output((value): MediaDetails => { throw new Error('Router should not be used') }).query((opts): MediaDetails => { throw new Error('Router should not be used') }),
get_season_episodes: publicProcedure.input((value): GetSeasonEpisodesInput => { throw new Error('Router should not be used') }).output((value): MediaWithFirstConnection[] => { throw new Error('Router should not be used') }).query((opts): MediaWithFirstConnection[] => { throw new Error('Router should not be used') }),
get_seasons: publicProcedure.input((value): GetSeasonsInput => { throw new Error('Router should not be used') }).output((value): number[] => { throw new Error('Router should not be used') }).query((opts): number[] => { throw new Error('Router should not be used') })
});

export type AppRouter = typeof appRouter;
